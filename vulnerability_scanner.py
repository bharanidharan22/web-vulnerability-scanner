import requests
from bs4 import BeautifulSoup
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def crawl(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        return forms
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return []

def test_sql_injection(url, forms):
    sql_payloads = ["' OR '1'='1", "' OR '1'='1' -- "]
    sql_issues = []
    for form in forms:
        action = form.get('action')
        method = form.get('method') or 'get'  # Default to 'get' if method is None
        inputs = form.find_all('input')
        
        for payload in sql_payloads:
            data = {}
            for input in inputs:
                name = input.get('name')
                data[name] = payload
            
            if method.lower() == 'post':
                response = requests.post(url + action, data=data)
            else:
                response = requests.get(url + action, params=data)
            
            if "error" in response.text.lower() or "sql" in response.text.lower():
                issue = f"SQL Injection vulnerability found at {url + action} with payload {payload}"
                sql_issues.append(issue)
                print(issue)
    return sql_issues


def test_xss(url, forms):
    xss_payloads = ['<script>alert("XSS")</script>', '"<img src=x onerror=alert(1)>']
    xss_issues = []
    for form in forms:
        action = form.get('action')
        method = form.get('method') or 'get'  # Default to 'get' if method is None
        inputs = form.find_all('input')
        
        for payload in xss_payloads:
            data = {}
            for input in inputs:
                name = input.get('name')
                data[name] = payload
            
            if method.lower() == 'post':
                response = requests.post(url + action, data=data)
            else:
                response = requests.get(url + action, params=data)
            
            if payload in response.text:
                issue = f"XSS vulnerability found at {url + action} with payload {payload}"
                xss_issues.append(issue)
                print(issue)
    return xss_issues


def check_headers(url):
    response = requests.get(url)
    headers = response.headers
    header_issues = []
    
    security_headers = ["Content-Security-Policy", "X-Content-Type-Options", "X-Frame-Options", "Strict-Transport-Security"]
    for header in security_headers:
        if header in headers:
            print(f"{header} is present.")
        else:
            issue = f"Warning: {header} is missing."
            header_issues.append(issue)
            print(issue)
    return header_issues

def generate_report(filename, sql_issues, xss_issues, header_issues):
    c = canvas.Canvas(filename, pagesize=letter)
    c.drawString(100, 750, "Web Vulnerability Report")
    
    y = 700
    c.drawString(100, y, "SQL Injection Issues:")
    y -= 20
    for issue in sql_issues:
        c.drawString(100, y, issue)
        y -= 20
    
    y -= 20
    c.drawString(100, y, "XSS Issues:")
    y -= 20
    for issue in xss_issues:
        c.drawString(100, y, issue)
        y -= 20
    
    y -= 20
    c.drawString(100, y, "Header Issues:")
    y -= 20
    for issue in header_issues:
        c.drawString(100, y, issue)
        y -= 20
    
    c.save()

def main(url):
    print(f"Scanning {url}...")

    forms = crawl(url)
    if not forms:
        print("No forms found.")
        return

    print("Testing for SQL Injection...")
    sql_issues = test_sql_injection(url, forms)
    
    print("Testing for XSS...")
    xss_issues = test_xss(url, forms)
    
    print("Checking HTTP Headers...")
    header_issues = check_headers(url)
    
    generate_report("vulnerability_report.pdf", sql_issues, xss_issues, header_issues)
    print("Scan complete. Report generated as vulnerability_report.pdf")

if __name__ == "__main__":
    target_url = "http://google.com"
    main(target_url)
